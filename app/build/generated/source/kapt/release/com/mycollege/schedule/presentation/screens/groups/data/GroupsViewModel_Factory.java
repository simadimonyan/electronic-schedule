// Generated by Dagger (https://dagger.dev).
package com.mycollege.schedule.presentation.screens.groups.data;

import com.mycollege.schedule.data.cache.CacheManager;
import com.mycollege.schedule.presentation.repository.ResourceManager;
import com.mycollege.schedule.presentation.repository.SharedStateRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Provider;
import dagger.internal.Providers;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class GroupsViewModel_Factory implements Factory<GroupsViewModel> {
  private final Provider<ResourceManager> resourcesProvider;

  private final Provider<CacheManager> cacheManagerProvider;

  private final Provider<SharedStateRepository> sharedProvider;

  public GroupsViewModel_Factory(Provider<ResourceManager> resourcesProvider,
      Provider<CacheManager> cacheManagerProvider, Provider<SharedStateRepository> sharedProvider) {
    this.resourcesProvider = resourcesProvider;
    this.cacheManagerProvider = cacheManagerProvider;
    this.sharedProvider = sharedProvider;
  }

  @Override
  public GroupsViewModel get() {
    return newInstance(resourcesProvider.get(), cacheManagerProvider.get(), sharedProvider.get());
  }

  public static GroupsViewModel_Factory create(
      javax.inject.Provider<ResourceManager> resourcesProvider,
      javax.inject.Provider<CacheManager> cacheManagerProvider,
      javax.inject.Provider<SharedStateRepository> sharedProvider) {
    return new GroupsViewModel_Factory(Providers.asDaggerProvider(resourcesProvider), Providers.asDaggerProvider(cacheManagerProvider), Providers.asDaggerProvider(sharedProvider));
  }

  public static GroupsViewModel_Factory create(Provider<ResourceManager> resourcesProvider,
      Provider<CacheManager> cacheManagerProvider, Provider<SharedStateRepository> sharedProvider) {
    return new GroupsViewModel_Factory(resourcesProvider, cacheManagerProvider, sharedProvider);
  }

  public static GroupsViewModel newInstance(ResourceManager resources, CacheManager cacheManager,
      SharedStateRepository shared) {
    return new GroupsViewModel(resources, cacheManager, shared);
  }
}

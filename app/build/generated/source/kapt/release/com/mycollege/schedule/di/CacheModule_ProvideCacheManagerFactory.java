// Generated by Dagger (https://dagger.dev).
package com.mycollege.schedule.di;

import android.content.Context;
import android.content.SharedPreferences;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import dagger.internal.Providers;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class CacheModule_ProvideCacheManagerFactory implements Factory<SharedPreferences> {
  private final Provider<Context> contextProvider;

  public CacheModule_ProvideCacheManagerFactory(Provider<Context> contextProvider) {
    this.contextProvider = contextProvider;
  }

  @Override
  public SharedPreferences get() {
    return provideCacheManager(contextProvider.get());
  }

  public static CacheModule_ProvideCacheManagerFactory create(
      javax.inject.Provider<Context> contextProvider) {
    return new CacheModule_ProvideCacheManagerFactory(Providers.asDaggerProvider(contextProvider));
  }

  public static CacheModule_ProvideCacheManagerFactory create(Provider<Context> contextProvider) {
    return new CacheModule_ProvideCacheManagerFactory(contextProvider);
  }

  public static SharedPreferences provideCacheManager(Context context) {
    return Preconditions.checkNotNullFromProvides(CacheModule.INSTANCE.provideCacheManager(context));
  }
}

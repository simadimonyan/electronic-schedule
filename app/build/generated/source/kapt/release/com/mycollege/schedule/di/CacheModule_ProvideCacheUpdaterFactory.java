// Generated by Dagger (https://dagger.dev).
package com.mycollege.schedule.di;

import com.mycollege.schedule.data.cache.CacheManager;
import com.mycollege.schedule.domain.background.CacheUpdater;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import dagger.internal.Providers;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class CacheModule_ProvideCacheUpdaterFactory implements Factory<CacheUpdater> {
  private final Provider<CacheManager> cacheManagerProvider;

  public CacheModule_ProvideCacheUpdaterFactory(Provider<CacheManager> cacheManagerProvider) {
    this.cacheManagerProvider = cacheManagerProvider;
  }

  @Override
  public CacheUpdater get() {
    return provideCacheUpdater(cacheManagerProvider.get());
  }

  public static CacheModule_ProvideCacheUpdaterFactory create(
      javax.inject.Provider<CacheManager> cacheManagerProvider) {
    return new CacheModule_ProvideCacheUpdaterFactory(Providers.asDaggerProvider(cacheManagerProvider));
  }

  public static CacheModule_ProvideCacheUpdaterFactory create(
      Provider<CacheManager> cacheManagerProvider) {
    return new CacheModule_ProvideCacheUpdaterFactory(cacheManagerProvider);
  }

  public static CacheUpdater provideCacheUpdater(CacheManager cacheManager) {
    return Preconditions.checkNotNullFromProvides(CacheModule.INSTANCE.provideCacheUpdater(cacheManager));
  }
}

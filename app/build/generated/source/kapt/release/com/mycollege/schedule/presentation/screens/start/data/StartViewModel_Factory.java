// Generated by Dagger (https://dagger.dev).
package com.mycollege.schedule.presentation.screens.start.data;

import com.mycollege.schedule.data.cache.CacheManager;
import com.mycollege.schedule.presentation.repository.SharedStateRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Provider;
import dagger.internal.Providers;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class StartViewModel_Factory implements Factory<StartViewModel> {
  private final Provider<CacheManager> cacheManagerProvider;

  private final Provider<SharedStateRepository> sharedProvider;

  public StartViewModel_Factory(Provider<CacheManager> cacheManagerProvider,
      Provider<SharedStateRepository> sharedProvider) {
    this.cacheManagerProvider = cacheManagerProvider;
    this.sharedProvider = sharedProvider;
  }

  @Override
  public StartViewModel get() {
    return newInstance(cacheManagerProvider.get(), sharedProvider.get());
  }

  public static StartViewModel_Factory create(
      javax.inject.Provider<CacheManager> cacheManagerProvider,
      javax.inject.Provider<SharedStateRepository> sharedProvider) {
    return new StartViewModel_Factory(Providers.asDaggerProvider(cacheManagerProvider), Providers.asDaggerProvider(sharedProvider));
  }

  public static StartViewModel_Factory create(Provider<CacheManager> cacheManagerProvider,
      Provider<SharedStateRepository> sharedProvider) {
    return new StartViewModel_Factory(cacheManagerProvider, sharedProvider);
  }

  public static StartViewModel newInstance(CacheManager cacheManager,
      SharedStateRepository shared) {
    return new StartViewModel(cacheManager, shared);
  }
}
